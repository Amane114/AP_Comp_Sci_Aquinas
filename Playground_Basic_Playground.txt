//Page 1 
//page 2
765-1200
//Page 3
34 + 56 + 230

1000 - 300
/*:
These signs are formally known as *arithmetic operators*. The `+` operator performs an addition operation on the two values to either side.
The asterisk `*` is the multiplication operator:
 */
3 * 100
//: The division operator is the slash `/`. (If the two numbers don't divide evenly, the remainder is discarded.)
24 / 8

17 / 3
//: Note that Swift observes the standard precedence of operations: `*` and `/` before `+` and `-`.
2 * 5 + 8

8 + 2 * 5
//: And it performs same-precedence operations in order from left to right:
120 / 6 * 2
//: There's also a special `%` operator to calculate the remainder of a division. (You'll learn more about practical uses of the remainder, or *modulo*, operator later in this course.)
12 % 5
//: The remainder operator observes the same precedence as multiplication and division.
12 % 5 + 4 / 2
//: For grouping, use parentheses `( )`, which take precedence over all other operators:
(8 + 2) * 5
120 / (6 * 2)
(300 + 500 + 400) / (6 / 2)
/*:
 - Experiment: 
Practice using the playground like a calculator.
Edit some of the existing expressions and add a few of your own.
Notice that every time you make a change the results are updated in the sidebar.
 */
 

/*:
Next, learn how programmers can leave notes in code.

[Previous](@previous)  |  page 3 of 7  |  [Next: Comments](@next)
 */

//Page 4
// This is a comment; it does not affect the code
34 + 56 + 230
//: Because comments are ignored, no result is displayed in the results bar for that line of code.
// 200 + 34 + 45
/*:
 - Experiment: 
Try _commenting out_ the calculation `34 + 56 + 230` by adding two slashes to the beginning of the calculation.\
Try _uncommenting_ the calculation `200 + 34 + 45` by deleting the two slashes.\
Edit some of the existing expressions and add a few of your own.\
Notice that every time you make a change the results are updated in the sidebar.
 */
 
/*:
 Programmers often comment out and uncomment code as they work. But there's a much more important use for comments. When you write code, you should also document it. Documentation helps you record why you made certain decisions and explain how your code works. You could write such explanatory material in a separate file, but it's much easier to be able to read the documentation of your code inline with the code itself. Programmers use comments to document their code as they write it.
 
 For example, what did the calculations above represent? With comments, the code becomes clear.
 */
// Total money (in dollars): Coin jar, wallet, and bank account
34 + 56 + 230

// Minutes of violin practice: Two weeks ago, last week, and this week
200 + 34 + 45

//Page 5
//Page 6
1000 / 0
/*:
Since there's an error, the playground stops running your code.\
Notice that there are no results displayed in the sidebar. üëâ
 */
2 + 2
/*:
In this case the error is ‚ÄúDivision by zero‚Äù. You can‚Äôt divide by zero in math class, and a computer can‚Äôt divide by zero either.

 - Experiment:
Change the `0` to another number to fix the error.

Next, read all about your very recent past.

[Previous](@previous)  |  page 6 of 7  |  [Next: Wrapping Up](@next)
 */

/Page 7
